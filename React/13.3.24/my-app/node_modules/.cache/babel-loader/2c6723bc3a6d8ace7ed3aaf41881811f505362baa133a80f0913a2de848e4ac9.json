{"ast":null,"code":"var _jsxFileName = \"/Users/masha/w23/13.3.24/my-app/src/components/learning/Clocks/ClockFC.jsx\",\n  _s = $RefreshSig$();\n// useState is hook that provides access to the componet's STATE\n// useEffect is a hook that provides access to the component's LIFECYCLE METHODS (e.g componentDidMount, componentDidUpdate, componentWillUnmount))\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClockFC = props => {\n  _s();\n  const [date, setDate] = useState(props.date);\n\n  // 'useEffect' with an empty dependency array will only run once after initial mounting\n  // This is equivalent to 'componentDidMount' in a class component\n  useEffect(() => {\n    console.log('componentDidMount');\n    const timerID = setInterval(() => {\n      let b = new Date();\n      b.setHours(b.getHours() + 8);\n      setDate(b);\n    }, 1000);\n\n    // This is the 'unmounting' event, equiavalent to 'componentWillUnmount' in a class component\n    return () => {\n      console.log('componentWillUnmount');\n      clearInterval(timerID);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: date.toString()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(ClockFC, \"QWzbWlkKEYd2dz8tGyPlHClDPCk=\");\n_c = ClockFC;\nexport default ClockFC;\nvar _c;\n$RefreshReg$(_c, \"ClockFC\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ClockFC","props","_s","date","setDate","console","log","timerID","setInterval","b","Date","setHours","getHours","clearInterval","children","toString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/masha/w23/13.3.24/my-app/src/components/learning/Clocks/ClockFC.jsx"],"sourcesContent":["// useState is hook that provides access to the componet's STATE\n// useEffect is a hook that provides access to the component's LIFECYCLE METHODS (e.g componentDidMount, componentDidUpdate, componentWillUnmount))\nimport React, { useState, useEffect } from 'react';\n\nconst ClockFC = (props) => {\n    const [date, setDate] = useState(props.date);\n\n    // 'useEffect' with an empty dependency array will only run once after initial mounting\n    // This is equivalent to 'componentDidMount' in a class component\n    useEffect(() => {\n        console.log('componentDidMount');\n        const timerID = setInterval(() => {\n            let b = new Date();\n            b.setHours(b.getHours() + 8);\n            setDate(b);\n        }, 1000);\n\n        // This is the 'unmounting' event, equiavalent to 'componentWillUnmount' in a class component\n        return () => {\n            console.log('componentWillUnmount');\n            clearInterval(timerID);\n        }\n    }, []);\n\n    return (\n        <div>\n            {date.toString()}\n        </div>\n    )\n}\n\nexport default ClockFC;"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAACK,KAAK,CAACE,IAAI,CAAC;;EAE5C;EACA;EACAN,SAAS,CAAC,MAAM;IACZQ,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChC,MAAMC,OAAO,GAAGC,WAAW,CAAC,MAAM;MAC9B,IAAIC,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC;MAClBD,CAAC,CAACE,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC5BR,OAAO,CAACK,CAAC,CAAC;IACd,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAM;MACTJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnCO,aAAa,CAACN,OAAO,CAAC;IAC1B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIR,OAAA;IAAAe,QAAA,EACKX,IAAI,CAACY,QAAQ,CAAC;EAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEd,CAAC;AAAAjB,EAAA,CAzBKF,OAAO;AAAAoB,EAAA,GAAPpB,OAAO;AA2Bb,eAAeA,OAAO;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}